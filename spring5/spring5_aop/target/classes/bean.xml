<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="accountService" class="com.lb.service.impl.AccountSeriveImpl"/>

    <!--spring中基于xml的AOP配置步骤
     1.把通知Bean也交给spring管理
     2.使用aop:config标签表明开始AOP的配置
     3.使用aop:aspect标签表明配置切面
                id属性：是给切面提供一个唯一的标识
                ref属性：是指定通知类bean的id
     4.在aop:aspect标签的内部使用对应标签来配置通知的类型
            aop:before 表示配置前置通知
                method属性：用于指定配置类中那个方法是前置通知
                pointcut属性：用于指定切入点表达式，该表达式指的是对业务层中那些方法增强
                切入点表达式的写法：
                    关键字：execution(表达式)
                    表达式：
                            访问修饰符  返回值  全限定类名.方法名(参数列表)
                    标准写法：public void com.lb.service.impl.AccountSeriveImpl.saveAccount()
                    访问修饰符可以省略：void com.lb.service.impl.AccountSeriveImpl.saveAccount()
                    返回值可以使用通配符，表示任意返回值：* com.lb.service.impl.AccountSeriveImpl.saveAccount()
                    包名也可以用通配符，表示任意包，但是有几级包，就需要写几个*.：* *.*.*.*.AccountSeriveImpl.saveAccount()
                    包名可以使用..表示当前子包及其子包：* *..AccountSeriveImpl.saveAccount()
                    类名和方法名都可以使用*来实现通配：* *..*.*()
                    参数列表：
                        可以直接写数据类型，基本类型直接写名称，引用类型写包名.类名
                        可以使用通配符表示任意类型，但必须有参数
                        可以使用..表示有无参数均可，有参数可以是任意类型
                    全通配写法：
                        * *..*.*(..)
                     通常写法：
                        切到业务层实现类下的所以方法
                            * com.lb.service.impl.*.*(..)
    -->
    <bean id="logger" class="com.lb.utils.Logger"/>

    <!--配置AOP-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入点方法的关联-->
            <aop:before method="printLog" pointcut="execution(* com.lb.service.impl.*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>

</beans>