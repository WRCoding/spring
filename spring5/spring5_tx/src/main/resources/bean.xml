<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">


    <bean id="accountService" class="com.lb.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>
    <bean id="accountDao" class="com.lb.dao.impl.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/spring?serverTimezone=GMT%2B8"/>
        <property name="username" value="root"/>
        <property name="password" value="1001101"/>
    </bean>

    <!--spring中基于XML的声明式事务控制配置步骤
        1.配置事务管理器
        2.配置事务的通知
                需要导入事务的约束
                使用tx:advice标签配置事务通知
                属性：
                    id:给事务通知起一个唯一标识
                    transaction-manager：给事务通知提供一个事务管理器的引用
        3.配置通用切入点表达式
        4.建立事务通知和切入点表达式的对应关系
        5.配置事务的属性 在tx:advice标签的内部
    -->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置事务的通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--配置事务的属性
         isolation：指定事务的隔离级别
         propagation：指定事务的传播行为，默认值是REQUIRED ，表示一定会有事务,查询方法可选择SUPPORTS
         read-only：指定是否只读，默认值为false，表示读写
         timeout：指定事务的超时时间，默认值为-1，表示永不超时，如果指定数值，则以秒为单位
         rollback-for：指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚，没有默认值，表示任何异常都回滚
         no-rollback-for：指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚，没有默认值，表示任何异常都回滚
        -->
        <!--name可以使用通配符，代表一类方法-->
        <tx:attributes>
            <tx:method name="transfer" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>
    
    <!--配置AOP-->
    <aop:config>
        <!--通用切入点表达式-->
        <aop:pointcut id="pCut" expression="execution(* com..lb.service.impl.*.*(..))"/>
        <!--建立切入点和通知的对应关系-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pCut"/>
    </aop:config>
</beans>