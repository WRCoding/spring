<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->
    <!-- 创建bean的三种方式
        1.使用默认构造函数创建
            在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，采用的就是默认构造函数创建bean对象，如果没有默认构造函数，则对象无法创建
    <bean id="accountService" class="com.lb.Service.impl.AccountServiceImpl"/>
 -->

    <!--2.使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
    <bean id="InstanceFactory" class="com.lb.factory.InstanceFactory"/>
    <bean id="accountService" factory-bean="InstanceFactory" factory-method="getAccountService"/>
    -->
    <!--3.使用静态工厂中的静态方法创建对象，并存入spring容器
     <bean id="accountService" class="com.lb.factory.StaticFactory" factory-method="getAccountService"/>
    -->

    <!--bean的作用范围调整
        bean标签的scope属性:指定bean的作用范围
        取值：
            singleton 单例（默认）
            prototype 多例
            request   作用于web应用的请求范围
            session   作用于web应用的会话范围
            global-session 作用于集群环境的会话范围（全局会话范围），不受集群环境时，就是session
    <bean id="accountService" class="com.lb.Service.impl.AccountServiceImpl" scope="prototype"/>
    -->

    <!--bean对象的生命周期
        单例：
            出生：当容器创建时对象出生
            活着：只要容器还在，对象一直活着
            死亡：容器销毁，对象消亡
            单例对象的生命周期和容器相同
        多例：
            出生：对象使用了，才出生
            活着：对象只要在使用就一直活着
            死亡：对象长时间不用时，且没有别的对象引用时，由Java的垃圾回收器回收
    -->
    <bean id="accountService" class="com.lb.Service.impl.AccountServiceImpl" init-method="init" destroy-method="destroy" scope="prototype"/>
</beans>